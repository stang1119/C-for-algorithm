/*  DYNAMIC  HUFFMAN  DECODER  */

#include <stdio.h>
#include <string.h>

#define  MAXN  256

int  S[MAXN];
	/*  a stack that holds bits before they are transmitted  */
int  M,E,R;
	/*  zero-weight counters, the number of zero-weight elements
	    is M=2^E+R, where 0<=R<2^E, except that M=0 implies R=-1  */
int  P[MAXN+1];
	/*  pointer to the parents of nodes, the parents of nodes 2j-1
	    and 2j is node P[j]  */
int  C[2*MAXN];
	/*  pointer to the children of nodes, if node k is internal,
	    and if its children are node 2j-1 and 2j, then C[k]=j,
	    while if node k is external, it represents letter aC[k] */
int  A[MAXN+2];
	/*  representation of the alphabet, if letter ak is currently
	    the jth letter of weight 0, then A[k]=j<=M, otherwise A[k]
	    is the number of the external node corresponding to ak  */
int  B[2*MAXN];
	/*  pointer to the blocks of nodes, all nodes j of a given
	    weight have the same value of B[j]	*/
int  W[2*MAXN];
	/*  the weights, block k has weight W[k]  */
int  L[2*MAXN];
	/*  left pointer for blocks, the nearest block whose weight
	    is less than that of block k is block L[k], unless
	    block k has the smallest weight, in which case L[k] is
	    the block of largest weight  */
int  G[2*MAXN];
	/*  right pointer for blocks, the nearest block whose weight
	    is greater than that of block k is block G[k], unless
	    block k has the greatest weight, in which case G[k] is
	    the block of smallest weight  */
int  H;
	/*  point to the block of smallest weight  */
int  D[2*MAXN];
	/*  pointer to the largest node number in a given block  */
int  V;
	/*  pointer to the head of the list of array positions
	    not currentlyused as block numbers, the available
	    positions are V, G[V], G[G[V]], etc.  */
int  Z;
	/*  constant equal to 2N-1, also point to the root of the tree	*/

int  q;

void initialize()
{
int  i;
M = 0;
E = 0;
R = -1;
Z = 2 * MAXN - 1;
for( i = 1; i <= MAXN; i ++ ){
   M ++;
   R ++;
   if( 2 * R == M ){
      E ++;
      R = 0;
      }
   A[i] = i;
   C[i] = i;
   }
H = 1;
L[H] = H;
G[H] = H;
W[H] = 0;
A[0] = Z;
D[H] = Z;
V = 2;
for( i = V; i <= Z - 1; i ++ )
   G[i] = i + 1;
G[Z] = 0;
P[MAXN] = 0;
C[Z] = 0;
B[Z] = H;
}

int decode()
{
int  q, j;
char cc;
q = Z;
while( A[C[q]] != q ) {
   if( (cc=getc(stdin)) == '#') 
      return (-1);   
   q = 2 * C[q] - 1 + (cc=='1'?1:0); 
   }
if( C[q] == 0 ){        /*  decode zero weight  */
   q = 0;
   for( j = 1; j <= E; j ++ ) {
      if( (cc=getc(stdin)) == '#') 
         return (-1); 
      q = 2 * q + (cc=='1'?1:0);
      }
   if( q < R ) {
      if( (cc=getc(stdin)) == '#') 
         return (-1); 
      q = 2 * q + (cc=='1'?1:0);
      }
   else
      q = q + R;
   q ++;
   }
return( C[q] );
}

void set_node( k )  /*  set k to the external node whose weight should increase  */
int  k;
{
q = A[k];
if( q <= M ){		/*  a zero weight will become positive	*/
   A[C[M]] = q;
   C[q] = C[M];
   if( R == 0 ){
      R = M / 2;
      if( R > 0 )
	 E --;
      }
   M --;
   R --;
   if( M > 0 ){
      q = A[0] - 1;
      A[0] = q - 1;
      A[k] = q;
      C[q] = k;
      if( M > 1 )
	 C[q-1] = 0;
      P[M] = q + 1;
      C[q + 1] = M;
      B[q] = H;
      B[q - 1] = H;
      }
   }
}

void move_right()  /*  exchange two subtrees of the same weight,
                assuming that neither is the child of the other  */
{
int  t, ct, cq, acq;
if( q < D[B[q]] && D[B[P[( q + 1 ) / 2]]] > q + 1){
			
   t = D[B[q]];
   ct = C[t];
   cq = C[q];
   acq = A[cq];
   if( A[ct] != t )
      P[ct] = q;
   else
      A[ct] = q;
   if( acq != q )
      P[cq] = t;
   else
      A[cq] = t;
   C[t] = cq;
   C[q] = ct;
   q = D[B[q]];
   }
}

void trans_high()  /*  increase the weight of a node 
                         along the path to the root  */
{
int  j, u, gu, lu, x, t, qq;
u = B[q];
gu = G[u];
lu = L[u];
x = W[u];
qq = D[u];
if( W[gu] == x + 1 ){
   B[q] = gu;
   B[qq] = gu;
   if( D[lu] == q - 1 || ( u == H && q == A[0] )){
			/*  block u disappears	*/
      G[lu] = gu;
      L[gu] = lu;
      if( H == u )
	     H = gu;
      G[u] = V;
      V = u;
      }
   else
      D[u] = q - 1;
   }
else{
   if( D[lu] == q - 1 || ( u == H && q == A[0] ) )
      W[u] = x + 1;
   else{	/*  a new block appears  */
      t = V;
      V = G[V];
      L[t] = u;
      G[t] = gu;
      L[gu] = t;
      G[u] = t;
      W[t] = x + 1;
      D[t] = D[u];
      D[u] = q - 1;
      B[q] = t;
      B[qq] = t;
      }
   }
q = qq;
}

void update( k )	/*  used by both sender and receiver */
int  k;
{
set_node( k );		
while( q > 0 ){
   move_right();	/*  move q to the right of its block  */
   trans_high();	/*  transfer q to the next block, with weight one higher  */
   q = P[( q + 1 ) / 2];
   }
}

int main()
{
int k;
initialize();
while( 1 ){
   k = decode();
   if( k == -1 )
      break;
   putc( (k<128)?k-1:k-MAXN, stdout);
   update( k );
   }
}

/* test sample 
0100000100100001010001000011101001010001000100110111011111110001001#
0110000100110001010001100011101001010001100100110111011111110001001#
*/
